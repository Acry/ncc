.\"                                      Hey, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.TH NCCNAV 1 "September 10, 2006"
.\" Please adjust this date whenever revising the manpage.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
nccnav, nccnavi \- explore the output of ncc on a text-mode console
.SH SYNOPSIS
.B nccnav
.RI [ Code.map ]
.br
.B nccnavi
.RI [ Code.map ]
.SH DESCRIPTION
This manual page documents briefly the
.B nccnav
command which can be used to browse the output generated by ncc
on a set of C / C++ files.

.SH COMMANDS (Mode 1)
When first invoked, nccnav will display a list of source files.
.TP
.B Arrow keys / Page up / Page down
Can be used to navigate to the desired file
.TP
.B Enter
Selects a file and takes the user to Mode 2
.TP
.B q
Takes the user back to the previous screen
.TP
.B O
Displays a list of all the functions in the selected file
.TP
.B a-z A-Z (except q)
Moves the cursor to the function beginning with the specified character
.TP
.B E
Displays a list of all functions not called by any other function
.TP
.B G
Displays a list of all the global variables

.SH COMMANDS (Mode 2)
This mode is oriented around a resource which can be a: file, function,
global variable, member of structure, structure

For any of the above, all the related resources are listed.
For example, in the case of a <function> there are:

1. File(s) with <function> definition (may not exist)
.br
2. Functions calling <function> (Blue)
.br
3. Global variables used by <function> (Red)
.br
4. <function-herself>
.br
5. Functions called by <function>
.br
	Dim grey: functions that do not call any other functions.
.br
	Brown: functions that do call other functions.
.br
	Red: Recursion detector alert (if enabled)
.br
6. Structure members used by <function> (Dark grey)

.TP
.B 1-6 <ENTER>
Recursively enter MODE 2 for that resource.
.TP
.B q
Pressing enter on 4 or typing 'q' will return to the previous screen.
.TP
.B BACKSPACE
The INITIAL SCREENS with a longjmp.
.TP
.B <
The HISTORY MODE.
.TP
.B r
Pressing 'r' on a red 5 get you to the UNROLL MODE.
.TP
.B m
Pressing 'm' on a function will get you to the POP-UP MODE
.TP
.B C
Pressing 'C' will run system("bash")

.SH INTERNAL SOURCE VIEWER
Pressing <SPACE> on:
.TP
.B ... a structure:
	Will extract and display the structure and declaration text.
.TP
.B ... a function:
	Will display the function text as found in the file which contains
	the function definition. For this to work, nccnav must be in the
	correct root directory or paths should be absolute. The ncc option
	-ncfabs is rather useful.

	Note that if a function reports to be defined in more than one
	files, this will probably fail.  This happens because ncc does
	not distinguish different static functions with the same name.
	They are considered the same thing and their resources are
	mixed in nccnav.  Currently, if nccnav detects more than one
	files for a function it will issue a warning.
.TP
.B ... a file in Mode 2:
	Will display the contents of the entire file.

By default, the internal source viewer uses
.B less.
When invoked via the
.B nccnavi
command, the source code is automatically indented and viewed through less.

.SH RECURSION DETECTOR
The recursion detector is enabled by default.

It can be disabled by pressing 'R' while in MODE 2. (it's supposed to be
expensive and may be confusing)

The recursion detector works in MODE 2 and if the current resource is a
function. In this case it will paint RED all the functions called by the
current function, which will eventually lead back to it by some way of
recursion.

Pressing 'r' on one of the red ones will display one of the possible paths
through which recursion can happen. Currently there is no way to view
alternative paths.

In this mode, 'q' will get you back while enter will proceed ahead deeper
into MODE 2 for the selected resource.

.SH POPUP MODE
This is an alternative way to browse the call flow and is entered by
pressing 'm' on a function in MODE 2.

Pop-up menus are generated, where the top element is a function and
below it all the functions called by it. Movement is possible
with the UP/DOWN arrows.

<enter> or RIGHT will expand a new pop-up for the current function.
'q' or LEFT will close the current pop-up and activate the previous one.
SPACE is available to view the source code.

BACKSPACE will close all the popups and return to MODE 2.

Pressing '2' will enter MODE 2 for the current selected element.
In this case, HISTORY and BACKSPACE are set at this breakpoint.

.SH HISTORY MODE
At any time you can press '<' and '>' to browse through all the previous
screens. <enter> on one of them will jump back to that screen. Any other
key will exit the HISTORY MODE.

.SH EXAMPLE
Supposing you've compiled the linux kernel with ncc.
Collecting all the .nccout files can be done with :

.TP
.B
find . -name \*.nccout | xargs cat > kernel.map

.TP
You can use pathremover to truncate long paths in `kernel.map'.

.TP
.B
find . -name \*.nccout | xargs cat | pathremover /mnt/src/hacks/linux-2.4.10/ > kernel.map

.TP
Then, that's viewed with:

.TP
.B
nccnav kernel.map

.TP
For more information on using ncc on the Linux kernel, please refer to:
.TP
.B
	/usr/share/doc/ncc/hacking.LINUX-KERNEL

.SH SEE ALSO
.BR ncc (1),
.BR gengraph.py (1),
.BR nccstrip.py (1),
.BR pathremover (1),
.SH AUTHOR
nccnav was written by Stelios Xanthakis <sxanth@ceid.upatras.gr>.
